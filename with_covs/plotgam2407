
### Funktion, die die VerÃ¤nderung der gamma abh von der covariate und dem state, in dem man ist plottet
# input: obs = data
#        mod = model (with beta matrix)
#        covs = covariate which should be plotted (as vector), NOT all covs in the mod
#        pos = row in beta (as number) where the corresponding betas are to find 
#        min, max = min and max of the covariate
#        seq = length of steps between min and max
#        N = # states (only 3 possible)
#        type = type in plot (as character)
#        cube = logical, if TRUE the gammacube is returned --> NO plotting then
# all covs in the mod that are not plottet are assumed to be 0

plotgam <- function (obs,mod,covs,pos,min,max,seq = 1,N=3,type="p",cube=FALSE){
    # create gammacube depending on covs
    beta <- mod$beta
    beta <- beta[c(1,pos),]
    covsvec <- seq(min,max,seq)
    n <- length(covsvec)
    covsvec <- c(rep(1,n),covsvec)
    covs.mat <- matrix(covsvec,ncol=length(covs)+1,byrow = F)
    eta.mat <- matrix(rep(NA,dim(beta)[2]*n),ncol=dim(beta)[2])
    gammacube <- array(rep(NA,N*N*n),dim= c(N,N,n))
    
    for(j in 1:n) {
        eta.mat[j,] <- covs.mat[j,]%*%beta
    } # eta sind in der selben Reihenfolge wie beta (12,13,21,23,31,32)
    for(i in 1:n){
        gamma <- matrix(c(0,eta.mat[i,1],eta.mat[i,2],eta.mat[i,3],0,eta.mat[i,4],eta.mat[i,5],eta.mat[i,6],0),
                    byrow=TRUE,ncol=N)
        gamma <- exp(gamma)
        gamma <- gamma/apply(gamma,1,sum)
        gammacube[,,i] <- gamma
    } 
    
    if(cube == TRUE){
        return(gammacube)
    }
    
    ### plot each gammaxx against covariate 
    gamma <- gammacube
    par(mfrow=c(N,1))
    
    gamma12 <- gamma[1,2,]
    gamma13 <- gamma[1,3,]
    gamma11 <- 1-(gamma12+gamma13)
    plot(covs.mat[,2],gamma12, xlab="covariate",ylab="probability",ylim=c(0,1),
         col="blue", pch=15, main = "probability to change from State 1",type=type)
    points(covs.mat[,2],gamma13,col="green",pch=16,type=type)
    points(covs.mat[,2],gamma11,col="red",pch=17,type=type)
    
    gamma21 <- gamma[2,1,]
    gamma23 <- gamma[2,3,]
    gamma22 <- 1-(gamma21+gamma23)
    plot(covs.mat[,2],gamma22, xlab="covariate",ylab="probability",ylim=c(0,1), 
         col="blue", pch=15,main = "probability to change from State 2",type=type)
    points(covs.mat[,2],gamma23,col="green",pch=16,type=type)
    points(covs.mat[,2],gamma21,col="red",pch=17,type=type)
    
    gamma31 <- gamma[3,1,]
    gamma32 <- gamma[3,2,]
    gamma33 <- 1-(gamma31+gamma32)
    plot(covs.mat[,2],gamma32, xlab="covariate",ylab="probability",ylim=c(0,1), 
         col="blue", pch=15,main = "probability to change from State 3",type=type)
    points(covs.mat[,2],gamma33,col="green",pch=16,type=type)
    points(covs.mat[,2],gamma31,col="red",pch=17,type=type)
}
        

# red: prob to change to state 1 (gammax1)
# blue: prob to change to state 2 (gammax2)
# green: prob to change to state 3 (gammax3)


############################# Test #############################
plotgam(data,mod1,c(11),2,min=0,max=10,seq=1,type="l", cube=FALSE)
